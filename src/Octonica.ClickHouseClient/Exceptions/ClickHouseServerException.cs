#region License Apache 2.0
/* Copyright 2019-2021, 2023 Octonica
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#endregion

using System;

namespace Octonica.ClickHouseClient.Exceptions
{
    /// <summary>
    /// Represents an exception generated by the ClickHouse server. The <see cref="ClickHouseException.ErrorCode"/> of an instance of this class
    /// is always <see cref="ClickHouseErrorCodes.ServerError"/>. This class can not be inherited.
    /// </summary>
    public sealed class ClickHouseServerException : ClickHouseException
    {
        /// <summary>
        /// The code of the error provided by the server.
        /// </summary>
        public int ServerErrorCode { get; }

        /// <summary>
        /// The type of the error provided by the server.
        /// </summary>
        public string ServerErrorType { get; }

        /// <summary>
        /// The server-side stack trace.
        /// </summary>
        public string ServerStackTrace { get; }
        
        /// <summary>
        /// The query passed to the server or <see langword="null"/> if the error is not related to the query.
        /// </summary>
        public string? Query { get; }

        /// <summary>
        /// Initializes a new instance of the ClickHouse server exception with the provided parameters and the <see cref="ClickHouseException.ErrorCode"/>
        /// equal to <see cref="ClickHouseErrorCodes.ServerError"/>.
        /// </summary>
        /// <param name="serverErrorCode">The code of the error provided by the server.</param>
        /// <param name="serverErrorType">The type of the error provided by the server.</param>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        /// <param name="serverStackTrace">The server-side stack trace.</param>
        public ClickHouseServerException(int serverErrorCode, string serverErrorType, string? message, string serverStackTrace)
            : base(ClickHouseErrorCodes.ServerError, message)
        {
            ServerErrorCode = serverErrorCode;
            ServerErrorType = serverErrorType;
            ServerStackTrace = serverStackTrace;
        }

        /// <summary>
        /// Initializes a new instance of the ClickHouse server exception with the provided parameters and the <see cref="ClickHouseException.ErrorCode"/>
        /// equal to <see cref="ClickHouseErrorCodes.ServerError"/>.
        /// </summary>
        /// <param name="serverErrorCode">The code of the error provided by the server.</param>
        /// <param name="serverErrorType">The type of the error provided by the server.</param>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        /// <param name="serverStackTrace">The server-side stack trace.</param>
        /// <param name="innerException">The exception that is the cause of the current exception.</param>
        public ClickHouseServerException(int serverErrorCode, string serverErrorType, string? message, string serverStackTrace, Exception? innerException)
            : base(ClickHouseErrorCodes.ServerError, message, innerException)
        {
            ServerErrorCode = serverErrorCode;
            ServerErrorType = serverErrorType;
            ServerStackTrace = serverStackTrace;
        }

        private ClickHouseServerException(int serverErrorCode, string serverErrorType, string? message, string serverStackTrace, string? query)
            : base(ClickHouseErrorCodes.ServerError, message)
        {
            ServerErrorCode = serverErrorCode;
            ServerErrorType = serverErrorType;
            ServerStackTrace = serverStackTrace;
            Query = query;
        }

        private ClickHouseServerException(int serverErrorCode, string serverErrorType, string? message, string serverStackTrace, string? query, Exception? innerException)
            : base(ClickHouseErrorCodes.ServerError, message, innerException)
        {
            ServerErrorCode = serverErrorCode;
            ServerErrorType = serverErrorType;
            ServerStackTrace = serverStackTrace;
            Query = query;
        }

        /// <summary>
        /// Creates and returns a new instance of <see cref="ClickHouseServerException"/> with the provided query.
        /// </summary>
        /// <param name="query">The query that should be added to the exception.</param>
        /// <returns>The new instance of <see cref="ClickHouseServerException"/> with the provided query</returns>
        public ClickHouseServerException CopyWithQuery(string query)
        {
            return CopyWith(query, null);
        }

        /// <summary>
        /// Creates and returns a new instance of <see cref="ClickHouseServerException"/> with the provided query.
        /// </summary>
        /// <param name="query">The query that should be added to the exception.</param>
        /// <param name="innerException">
        /// The inner exception caused this exception.
        /// If <see cref="Exception.InnerException"/> is already exists it will be replaced with <see cref="AggregateException"/>
        /// containig two inner exceptions.
        /// </param>
        /// <returns>The new instance of <see cref="ClickHouseServerException"/> with the provided query</returns>
        public ClickHouseServerException CopyWith(string query, Exception? innerException)
        {
            var innerEx =
                InnerException == null ? innerException :
                innerException == null ? InnerException :
                new AggregateException(InnerException, innerException);

            return new ClickHouseServerException(ServerErrorCode, ServerErrorType, Message, ServerStackTrace, query, innerEx);
        }
    }
}
